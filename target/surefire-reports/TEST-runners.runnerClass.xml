<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="runners.runnerClass" time="703.445" tests="31" errors="0" skipped="0" failures="0">
  <properties>
    <property name="sun.desktop" value="windows"/>
    <property name="awt.toolkit" value="sun.awt.windows.WToolkit"/>
    <property name="java.specification.version" value="11"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="Cp1252"/>
    <property name="java.class.path" value="C:\Users\magre\IdeaProjects\Group5B16\target\test-classes;C:\Users\magre\IdeaProjects\Group5B16\target\classes;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-java\4.13.0\selenium-java-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-api\4.13.0\selenium-api-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-chrome-driver\4.13.0\selenium-chrome-driver-4.13.0.jar;C:\Users\magre\.m2\repository\com\google\auto\service\auto-service-annotations\1.1.1\auto-service-annotations-1.1.1.jar;C:\Users\magre\.m2\repository\com\google\guava\guava\32.1.2-jre\guava-32.1.2-jre.jar;C:\Users\magre\.m2\repository\com\google\guava\failureaccess\1.0.1\failureaccess-1.0.1.jar;C:\Users\magre\.m2\repository\com\google\guava\listenablefuture\9999.0-empty-to-avoid-conflict-with-guava\listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar;C:\Users\magre\.m2\repository\com\google\code\findbugs\jsr305\3.0.2\jsr305-3.0.2.jar;C:\Users\magre\.m2\repository\org\checkerframework\checker-qual\3.33.0\checker-qual-3.33.0.jar;C:\Users\magre\.m2\repository\com\google\errorprone\error_prone_annotations\2.18.0\error_prone_annotations-2.18.0.jar;C:\Users\magre\.m2\repository\com\google\j2objc\j2objc-annotations\2.8\j2objc-annotations-2.8.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-chromium-driver\4.13.0\selenium-chromium-driver-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-json\4.13.0\selenium-json-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-manager\4.13.0\selenium-manager-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-devtools-v115\4.13.0\selenium-devtools-v115-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-devtools-v116\4.13.0\selenium-devtools-v116-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-devtools-v117\4.13.0\selenium-devtools-v117-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-devtools-v85\4.13.0\selenium-devtools-v85-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-edge-driver\4.13.0\selenium-edge-driver-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-firefox-driver\4.13.0\selenium-firefox-driver-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-http\4.13.0\selenium-http-4.13.0.jar;C:\Users\magre\.m2\repository\dev\failsafe\failsafe\3.3.2\failsafe-3.3.2.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-ie-driver\4.13.0\selenium-ie-driver-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-remote-driver\4.13.0\selenium-remote-driver-4.13.0.jar;C:\Users\magre\.m2\repository\io\netty\netty-buffer\4.1.96.Final\netty-buffer-4.1.96.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-codec-http\4.1.96.Final\netty-codec-http-4.1.96.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-codec\4.1.96.Final\netty-codec-4.1.96.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-handler\4.1.96.Final\netty-handler-4.1.96.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-common\4.1.96.Final\netty-common-4.1.96.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-transport-classes-epoll\4.1.96.Final\netty-transport-classes-epoll-4.1.96.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-transport-classes-kqueue\4.1.96.Final\netty-transport-classes-kqueue-4.1.96.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-transport-native-epoll\4.1.96.Final\netty-transport-native-epoll-4.1.96.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-transport-native-kqueue\4.1.96.Final\netty-transport-native-kqueue-4.1.96.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-transport-native-unix-common\4.1.96.Final\netty-transport-native-unix-common-4.1.96.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-transport\4.1.96.Final\netty-transport-4.1.96.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-resolver\4.1.96.Final\netty-resolver-4.1.96.Final.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-api\1.28.0\opentelemetry-api-1.28.0.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-context\1.28.0\opentelemetry-context-1.28.0.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-exporter-logging\1.28.0\opentelemetry-exporter-logging-1.28.0.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-sdk-metrics\1.28.0\opentelemetry-sdk-metrics-1.28.0.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-extension-incubator\1.28.0-alpha\opentelemetry-extension-incubator-1.28.0-alpha.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-sdk-logs\1.28.0\opentelemetry-sdk-logs-1.28.0.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-sdk-common\1.28.0\opentelemetry-sdk-common-1.28.0.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-sdk-extension-autoconfigure-spi\1.28.0\opentelemetry-sdk-extension-autoconfigure-spi-1.28.0.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-sdk-extension-autoconfigure\1.28.0\opentelemetry-sdk-extension-autoconfigure-1.28.0.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-api-events\1.28.0-alpha\opentelemetry-api-events-1.28.0-alpha.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-sdk-trace\1.28.0\opentelemetry-sdk-trace-1.28.0.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-sdk\1.28.0\opentelemetry-sdk-1.28.0.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-semconv\1.28.0-alpha\opentelemetry-semconv-1.28.0-alpha.jar;C:\Users\magre\.m2\repository\net\bytebuddy\byte-buddy\1.14.5\byte-buddy-1.14.5.jar;C:\Users\magre\.m2\repository\org\asynchttpclient\async-http-client\2.12.3\async-http-client-2.12.3.jar;C:\Users\magre\.m2\repository\org\asynchttpclient\async-http-client-netty-utils\2.12.3\async-http-client-netty-utils-2.12.3.jar;C:\Users\magre\.m2\repository\io\netty\netty-codec-socks\4.1.60.Final\netty-codec-socks-4.1.60.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-handler-proxy\4.1.60.Final\netty-handler-proxy-4.1.60.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-transport-native-epoll\4.1.60.Final\netty-transport-native-epoll-4.1.60.Final-linux-x86_64.jar;C:\Users\magre\.m2\repository\io\netty\netty-transport-native-kqueue\4.1.60.Final\netty-transport-native-kqueue-4.1.60.Final-osx-x86_64.jar;C:\Users\magre\.m2\repository\org\reactivestreams\reactive-streams\1.0.3\reactive-streams-1.0.3.jar;C:\Users\magre\.m2\repository\com\typesafe\netty\netty-reactive-streams\2.0.4\netty-reactive-streams-2.0.4.jar;C:\Users\magre\.m2\repository\org\slf4j\slf4j-api\1.7.30\slf4j-api-1.7.30.jar;C:\Users\magre\.m2\repository\com\sun\activation\jakarta.activation\1.2.2\jakarta.activation-1.2.2.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-os\4.13.0\selenium-os-4.13.0.jar;C:\Users\magre\.m2\repository\org\apache\commons\commons-exec\1.3\commons-exec-1.3.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-safari-driver\4.13.0\selenium-safari-driver-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-support\4.13.0\selenium-support-4.13.0.jar;C:\Users\magre\.m2\repository\io\cucumber\cucumber-java\7.14.0\cucumber-java-7.14.0.jar;C:\Users\magre\.m2\repository\io\cucumber\cucumber-core\7.14.0\cucumber-core-7.14.0.jar;C:\Users\magre\.m2\repository\io\cucumber\cucumber-gherkin\7.14.0\cucumber-gherkin-7.14.0.jar;C:\Users\magre\.m2\repository\io\cucumber\cucumber-gherkin-messages\7.14.0\cucumber-gherkin-messages-7.14.0.jar;C:\Users\magre\.m2\repository\io\cucumber\gherkin\26.2.0\gherkin-26.2.0.jar;C:\Users\magre\.m2\repository\io\cucumber\messages\22.0.0\messages-22.0.0.jar;C:\Users\magre\.m2\repository\io\cucumber\tag-expressions\5.0.6\tag-expressions-5.0.6.jar;C:\Users\magre\.m2\repository\io\cucumber\cucumber-expressions\16.1.2\cucumber-expressions-16.1.2.jar;C:\Users\magre\.m2\repository\io\cucumber\datatable\7.14.0\datatable-7.14.0.jar;C:\Users\magre\.m2\repository\io\cucumber\cucumber-plugin\7.14.0\cucumber-plugin-7.14.0.jar;C:\Users\magre\.m2\repository\io\cucumber\docstring\7.14.0\docstring-7.14.0.jar;C:\Users\magre\.m2\repository\io\cucumber\html-formatter\20.4.0\html-formatter-20.4.0.jar;C:\Users\magre\.m2\repository\io\cucumber\junit-xml-formatter\0.2.0\junit-xml-formatter-0.2.0.jar;C:\Users\magre\.m2\repository\io\cucumber\ci-environment\9.2.0\ci-environment-9.2.0.jar;C:\Users\magre\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\magre\.m2\repository\io\cucumber\cucumber-junit\7.14.0\cucumber-junit-7.14.0.jar;C:\Users\magre\.m2\repository\junit\junit\4.13.2\junit-4.13.2.jar;C:\Users\magre\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\magre\.m2\repository\org\apache\poi\poi\5.2.4\poi-5.2.4.jar;C:\Users\magre\.m2\repository\commons-codec\commons-codec\1.16.0\commons-codec-1.16.0.jar;C:\Users\magre\.m2\repository\org\apache\commons\commons-collections4\4.4\commons-collections4-4.4.jar;C:\Users\magre\.m2\repository\org\apache\commons\commons-math3\3.6.1\commons-math3-3.6.1.jar;C:\Users\magre\.m2\repository\com\zaxxer\SparseBitSet\1.3\SparseBitSet-1.3.jar;C:\Users\magre\.m2\repository\org\apache\logging\log4j\log4j-api\2.20.0\log4j-api-2.20.0.jar;C:\Users\magre\.m2\repository\org\apache\poi\poi-ooxml\5.2.4\poi-ooxml-5.2.4.jar;C:\Users\magre\.m2\repository\org\apache\poi\poi-ooxml-lite\5.2.4\poi-ooxml-lite-5.2.4.jar;C:\Users\magre\.m2\repository\org\apache\xmlbeans\xmlbeans\5.1.1\xmlbeans-5.1.1.jar;C:\Users\magre\.m2\repository\org\apache\commons\commons-compress\1.24.0\commons-compress-1.24.0.jar;C:\Users\magre\.m2\repository\com\github\virtuald\curvesapi\1.08\curvesapi-1.08.jar;C:\Users\magre\.m2\repository\commons-io\commons-io\2.14.0\commons-io-2.14.0.jar;C:\Users\magre\.m2\repository\org\apache\logging\log4j\log4j-core\2.20.0\log4j-core-2.20.0.jar;C:\Users\magre\.m2\repository\cc\ricecx\logsnag4j\1.1\logsnag4j-1.1.jar;C:\Users\magre\.m2\repository\com\google\code\gson\gson\2.9.0\gson-2.9.0.jar;C:\Users\magre\.m2\repository\org\json\json\20230618\json-20230618.jar;"/>
    <property name="java.vm.vendor" value="Amazon.com Inc."/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="https://aws.amazon.com/corretto/"/>
    <property name="user.timezone" value="America/New_York"/>
    <property name="java.vm.specification.version" value="11"/>
    <property name="os.name" value="Windows 11"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="US"/>
    <property name="sun.boot.library.path" value="C:\Users\magre\.jdks\corretto-11.0.20.1\bin"/>
    <property name="sun.java.command" value="C:\Users\magre\AppData\Local\Temp\surefire14566432378723497120\surefirebooter-20231007134143315_3.jar C:\Users\magre\AppData\Local\Temp\surefire14566432378723497120 2023-10-07T13-41-43_010-jvmRun1 surefire-20231007134143315_1tmp surefire_0-20231007134143315_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="C:\Users\magre\IdeaProjects\Group5B16\target\test-classes;C:\Users\magre\IdeaProjects\Group5B16\target\classes;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-java\4.13.0\selenium-java-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-api\4.13.0\selenium-api-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-chrome-driver\4.13.0\selenium-chrome-driver-4.13.0.jar;C:\Users\magre\.m2\repository\com\google\auto\service\auto-service-annotations\1.1.1\auto-service-annotations-1.1.1.jar;C:\Users\magre\.m2\repository\com\google\guava\guava\32.1.2-jre\guava-32.1.2-jre.jar;C:\Users\magre\.m2\repository\com\google\guava\failureaccess\1.0.1\failureaccess-1.0.1.jar;C:\Users\magre\.m2\repository\com\google\guava\listenablefuture\9999.0-empty-to-avoid-conflict-with-guava\listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar;C:\Users\magre\.m2\repository\com\google\code\findbugs\jsr305\3.0.2\jsr305-3.0.2.jar;C:\Users\magre\.m2\repository\org\checkerframework\checker-qual\3.33.0\checker-qual-3.33.0.jar;C:\Users\magre\.m2\repository\com\google\errorprone\error_prone_annotations\2.18.0\error_prone_annotations-2.18.0.jar;C:\Users\magre\.m2\repository\com\google\j2objc\j2objc-annotations\2.8\j2objc-annotations-2.8.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-chromium-driver\4.13.0\selenium-chromium-driver-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-json\4.13.0\selenium-json-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-manager\4.13.0\selenium-manager-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-devtools-v115\4.13.0\selenium-devtools-v115-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-devtools-v116\4.13.0\selenium-devtools-v116-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-devtools-v117\4.13.0\selenium-devtools-v117-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-devtools-v85\4.13.0\selenium-devtools-v85-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-edge-driver\4.13.0\selenium-edge-driver-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-firefox-driver\4.13.0\selenium-firefox-driver-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-http\4.13.0\selenium-http-4.13.0.jar;C:\Users\magre\.m2\repository\dev\failsafe\failsafe\3.3.2\failsafe-3.3.2.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-ie-driver\4.13.0\selenium-ie-driver-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-remote-driver\4.13.0\selenium-remote-driver-4.13.0.jar;C:\Users\magre\.m2\repository\io\netty\netty-buffer\4.1.96.Final\netty-buffer-4.1.96.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-codec-http\4.1.96.Final\netty-codec-http-4.1.96.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-codec\4.1.96.Final\netty-codec-4.1.96.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-handler\4.1.96.Final\netty-handler-4.1.96.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-common\4.1.96.Final\netty-common-4.1.96.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-transport-classes-epoll\4.1.96.Final\netty-transport-classes-epoll-4.1.96.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-transport-classes-kqueue\4.1.96.Final\netty-transport-classes-kqueue-4.1.96.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-transport-native-epoll\4.1.96.Final\netty-transport-native-epoll-4.1.96.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-transport-native-kqueue\4.1.96.Final\netty-transport-native-kqueue-4.1.96.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-transport-native-unix-common\4.1.96.Final\netty-transport-native-unix-common-4.1.96.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-transport\4.1.96.Final\netty-transport-4.1.96.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-resolver\4.1.96.Final\netty-resolver-4.1.96.Final.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-api\1.28.0\opentelemetry-api-1.28.0.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-context\1.28.0\opentelemetry-context-1.28.0.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-exporter-logging\1.28.0\opentelemetry-exporter-logging-1.28.0.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-sdk-metrics\1.28.0\opentelemetry-sdk-metrics-1.28.0.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-extension-incubator\1.28.0-alpha\opentelemetry-extension-incubator-1.28.0-alpha.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-sdk-logs\1.28.0\opentelemetry-sdk-logs-1.28.0.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-sdk-common\1.28.0\opentelemetry-sdk-common-1.28.0.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-sdk-extension-autoconfigure-spi\1.28.0\opentelemetry-sdk-extension-autoconfigure-spi-1.28.0.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-sdk-extension-autoconfigure\1.28.0\opentelemetry-sdk-extension-autoconfigure-1.28.0.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-api-events\1.28.0-alpha\opentelemetry-api-events-1.28.0-alpha.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-sdk-trace\1.28.0\opentelemetry-sdk-trace-1.28.0.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-sdk\1.28.0\opentelemetry-sdk-1.28.0.jar;C:\Users\magre\.m2\repository\io\opentelemetry\opentelemetry-semconv\1.28.0-alpha\opentelemetry-semconv-1.28.0-alpha.jar;C:\Users\magre\.m2\repository\net\bytebuddy\byte-buddy\1.14.5\byte-buddy-1.14.5.jar;C:\Users\magre\.m2\repository\org\asynchttpclient\async-http-client\2.12.3\async-http-client-2.12.3.jar;C:\Users\magre\.m2\repository\org\asynchttpclient\async-http-client-netty-utils\2.12.3\async-http-client-netty-utils-2.12.3.jar;C:\Users\magre\.m2\repository\io\netty\netty-codec-socks\4.1.60.Final\netty-codec-socks-4.1.60.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-handler-proxy\4.1.60.Final\netty-handler-proxy-4.1.60.Final.jar;C:\Users\magre\.m2\repository\io\netty\netty-transport-native-epoll\4.1.60.Final\netty-transport-native-epoll-4.1.60.Final-linux-x86_64.jar;C:\Users\magre\.m2\repository\io\netty\netty-transport-native-kqueue\4.1.60.Final\netty-transport-native-kqueue-4.1.60.Final-osx-x86_64.jar;C:\Users\magre\.m2\repository\org\reactivestreams\reactive-streams\1.0.3\reactive-streams-1.0.3.jar;C:\Users\magre\.m2\repository\com\typesafe\netty\netty-reactive-streams\2.0.4\netty-reactive-streams-2.0.4.jar;C:\Users\magre\.m2\repository\org\slf4j\slf4j-api\1.7.30\slf4j-api-1.7.30.jar;C:\Users\magre\.m2\repository\com\sun\activation\jakarta.activation\1.2.2\jakarta.activation-1.2.2.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-os\4.13.0\selenium-os-4.13.0.jar;C:\Users\magre\.m2\repository\org\apache\commons\commons-exec\1.3\commons-exec-1.3.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-safari-driver\4.13.0\selenium-safari-driver-4.13.0.jar;C:\Users\magre\.m2\repository\org\seleniumhq\selenium\selenium-support\4.13.0\selenium-support-4.13.0.jar;C:\Users\magre\.m2\repository\io\cucumber\cucumber-java\7.14.0\cucumber-java-7.14.0.jar;C:\Users\magre\.m2\repository\io\cucumber\cucumber-core\7.14.0\cucumber-core-7.14.0.jar;C:\Users\magre\.m2\repository\io\cucumber\cucumber-gherkin\7.14.0\cucumber-gherkin-7.14.0.jar;C:\Users\magre\.m2\repository\io\cucumber\cucumber-gherkin-messages\7.14.0\cucumber-gherkin-messages-7.14.0.jar;C:\Users\magre\.m2\repository\io\cucumber\gherkin\26.2.0\gherkin-26.2.0.jar;C:\Users\magre\.m2\repository\io\cucumber\messages\22.0.0\messages-22.0.0.jar;C:\Users\magre\.m2\repository\io\cucumber\tag-expressions\5.0.6\tag-expressions-5.0.6.jar;C:\Users\magre\.m2\repository\io\cucumber\cucumber-expressions\16.1.2\cucumber-expressions-16.1.2.jar;C:\Users\magre\.m2\repository\io\cucumber\datatable\7.14.0\datatable-7.14.0.jar;C:\Users\magre\.m2\repository\io\cucumber\cucumber-plugin\7.14.0\cucumber-plugin-7.14.0.jar;C:\Users\magre\.m2\repository\io\cucumber\docstring\7.14.0\docstring-7.14.0.jar;C:\Users\magre\.m2\repository\io\cucumber\html-formatter\20.4.0\html-formatter-20.4.0.jar;C:\Users\magre\.m2\repository\io\cucumber\junit-xml-formatter\0.2.0\junit-xml-formatter-0.2.0.jar;C:\Users\magre\.m2\repository\io\cucumber\ci-environment\9.2.0\ci-environment-9.2.0.jar;C:\Users\magre\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\magre\.m2\repository\io\cucumber\cucumber-junit\7.14.0\cucumber-junit-7.14.0.jar;C:\Users\magre\.m2\repository\junit\junit\4.13.2\junit-4.13.2.jar;C:\Users\magre\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\magre\.m2\repository\org\apache\poi\poi\5.2.4\poi-5.2.4.jar;C:\Users\magre\.m2\repository\commons-codec\commons-codec\1.16.0\commons-codec-1.16.0.jar;C:\Users\magre\.m2\repository\org\apache\commons\commons-collections4\4.4\commons-collections4-4.4.jar;C:\Users\magre\.m2\repository\org\apache\commons\commons-math3\3.6.1\commons-math3-3.6.1.jar;C:\Users\magre\.m2\repository\com\zaxxer\SparseBitSet\1.3\SparseBitSet-1.3.jar;C:\Users\magre\.m2\repository\org\apache\logging\log4j\log4j-api\2.20.0\log4j-api-2.20.0.jar;C:\Users\magre\.m2\repository\org\apache\poi\poi-ooxml\5.2.4\poi-ooxml-5.2.4.jar;C:\Users\magre\.m2\repository\org\apache\poi\poi-ooxml-lite\5.2.4\poi-ooxml-lite-5.2.4.jar;C:\Users\magre\.m2\repository\org\apache\xmlbeans\xmlbeans\5.1.1\xmlbeans-5.1.1.jar;C:\Users\magre\.m2\repository\org\apache\commons\commons-compress\1.24.0\commons-compress-1.24.0.jar;C:\Users\magre\.m2\repository\com\github\virtuald\curvesapi\1.08\curvesapi-1.08.jar;C:\Users\magre\.m2\repository\commons-io\commons-io\2.14.0\commons-io-2.14.0.jar;C:\Users\magre\.m2\repository\org\apache\logging\log4j\log4j-core\2.20.0\log4j-core-2.20.0.jar;C:\Users\magre\.m2\repository\cc\ricecx\logsnag4j\1.1\logsnag4j-1.1.jar;C:\Users\magre\.m2\repository\com\google\code\gson\gson\2.9.0\gson-2.9.0.jar;C:\Users\magre\.m2\repository\org\json\json\20230618\json-20230618.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\magre"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2023-08-22"/>
    <property name="java.home" value="C:\Users\magre\.jdks\corretto-11.0.20.1"/>
    <property name="file.separator" value="\"/>
    <property name="basedir" value="C:\Users\magre\IdeaProjects\Group5B16"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.awt.graphicsenv" value="sun.awt.Win32GraphicsEnvironment"/>
    <property name="surefire.real.class.path" value="C:\Users\magre\AppData\Local\Temp\surefire14566432378723497120\surefirebooter-20231007134143315_3.jar"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="11.0.20.1+9-LTS"/>
    <property name="user.name" value="magre"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="Cp1252"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Corretto-11.0.20.9.1"/>
    <property name="localRepository" value="C:\Users\magre\.m2\repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/corretto/corretto-11/issues/"/>
    <property name="java.io.tmpdir" value="C:\Users\magre\AppData\Local\Temp\"/>
    <property name="idea.version" value="2023.2.2"/>
    <property name="java.version" value="11.0.20.1"/>
    <property name="user.dir" value="C:\Users\magre\IdeaProjects\Group5B16"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="java.awt.printerjob" value="sun.awt.windows.WPrinterJob"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="java.library.path" value="C:\Users\magre\.jdks\corretto-11.0.20.1\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\dotnet\;C:\Users\magre\.jdks\corretto-11.0.20.1\bin;C:\Program Files\apache-maven-3.9.3\bin;C:\Program Files\Git\cmd;C:\Program Files\Docker\Docker\resources\bin;C:\Users\magre\AppData\Local\Android\Sdk\emulator;C:\Users\magre\AppData\Local\Android\Sdk\tools;C:\Users\magre\AppData\Local\Android\Sdk\platform-tools;%MAVE_HOME%\bin;C:\Users\magre\AppData\Local\Microsoft\WindowsApps;;."/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.vendor" value="Amazon.com Inc."/>
    <property name="java.vm.version" value="11.0.20.1+9-LTS"/>
    <property name="java.specification.maintenance.version" value="2"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="55.0"/>
  </properties>
  <testcase name="editing employee contact details using excel file" classname="employee changes contact details scenario" time="16.292">
    <system-out><![CDATA[
@smoke @fatima
Scenario: editing employee contact details using excel file                            # src/test/resources/features/EmpContactDetail.feature:11
ERROR StatusConsoleListener Unknown object "root" of type org.apache.logging.log4j.core.config.LoggerConfig is ignored: try nesting it inside one of: ["Appenders", "Loggers", "Properties", "Scripts", "CustomLevels"].
  When user enters valid ess username and password                                     # steps.EmployeeContactDetailSteps.userEntersValidEssUsernameAndPassword()
  And user clicks on login button                                                      # steps.EmployeeContactDetailSteps.userClicksOnLoginButton()
  Then user is successfully logged in the application                                  # steps.EmployeeContactDetailSteps.userIsSuccessfullyLoggedInTheApplication()
  When user clicks on My Info tab                                                      # steps.EmployeeContactDetailSteps.userClicksOnMyInfoTab()
  When user clicks on contact detail                                                   # steps.EmployeeContactDetailSteps.userClicksOnContactDetail()
  Then user is on contact detail page                                                  # steps.EmployeeContactDetailSteps.userIsOnContactDetailPage()
  When user edits contact details using excel file "EmployeeContactDetail" and save it # steps.EmployeeContactDetailSteps.userEditsContactDetailsUsingExcelFileAndSaveIt(java.lang.String)
  Then user contact details should be updated successfully                             # steps.EmployeeContactDetailSteps.userContactDetailsShouldBeUpdatedSuccessfully()

    Embedding editing employee contact details using excel file [image/png 153658 bytes]

]]></system-out>
    <system-err><![CDATA[SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
]]></system-err>
  </testcase>
  <testcase name="admin can access and view a comprehensive employee directory" classname="Employee Directory View in the HRMS Application" time="26.712">
    <system-out><![CDATA[
@directory
Scenario: admin can access and view a comprehensive employee directory     # src/test/resources/features/activeEmployee.feature:7
  Given user is navigated to HRMS application                              # steps.TerminateEmployeeScenario.userIsNavigatedToHRMSApplication()
  Given admin is on the PIM page                                           # steps.ActiveEmployees.adminIsOnThePIMPage()
  And admin clicks on Employment Status and selected active                # steps.ActiveEmployees.adminClicksOnEmploymentStatusAndSelectedActive()
  And admin clicks on search button                                        # steps.AdminAddJobDetailsSteps.adminClicksOnSearchButton()
89085A Jacks SMO Adama Eginier Active
89109A Jacks SMO Adama Eginier Active
88430A Elena V C B QA (Deleted) Active
88082A akrem ca baok QA Anylast Active
88102A akrem ca baok QA Anylast Active
88140A akrem ca baok QA Anylast Active
88146A akrem ca baok QA Anylast Active
88203A akrem ca baok QA Anylast Active
88451A akrem ca baok QA Anylast Active
90034A Mocha CD Caramel Model Active
90038A Mocha CD Caramel Model Active
90040A Mocha CD Caramel Model Active
90049A Mocha CD Caramel Model Active
90052A Mocha CD Caramel Model Active
90055A Mocha CD Caramel Model Active
90056A Mocha CD Caramel Model Active
90059A Mocha CD Caramel Model Active
91565A Mocha CD Caramel Model Active
91566A Mocha CD Caramel Model Active
88349A Ola lola Dony GoatGuy Active
92952A Ola lola Dony BigBoss Active
92958A Ola lola Dony BigBoss Active
92970A Ola lola Dony BigBoss Active
93194A Ola lola Dony BigBoss Active
93217A Ola lola Dony BigBoss Active
94329A athena sorry hoppa babysitter Active
88339A Javed MS Khan Automation Engineer (Deleted) Active
90560A Javed WS Khan Automation Engineer (Deleted) Active
90629A Javed WS Khan Automation Engineer (Deleted) Active
90678A Javed WS Khan Automation Engineer (Deleted) Active
90684A Javed MSDoni Khan Automation Engineer (Deleted) Active
90687A Javed MSDoni Khan Automation Engineer (Deleted) Active
90963A Pixar LP Lilo QA (Deleted) Active
90964A Pixar DS Lilo QA (Deleted) Active
90969A Pixar LP Lilo QA (Deleted) Active
90972A Pixar LP Lilo QA (Deleted) Active
90973A Pixar LP Lilo QA (Deleted) Active
90975A Pixar LP Lilo QA (Deleted) Active
90976A Pixar LP Lilo QA (Deleted) Active
90982A Pixar LP Lilo QA (Deleted) Active
92580A Pixar LP Lilo QA (Deleted) Active
93248A Pat S Manu Senior cell destroyer Active
93252A pat S Manu Senior cell destroyer Active
93253A pat S Manu Senior cell destroyer Active
93259A pat S Manu Senior cell destroyer Active
93261A Pat S Manu Senior cell destroyer Active
93284A Pat S Manu Senior cell destroyer Active
93288A Pat S Manu Senior cell destroyer Active
93290A Pat S Manu Senior cell destroyer Active
93291A pat S Manu Senior cell destroyer Active
  When admin stores active employees on a list or a table                  # steps.ActiveEmployees.adminStoresActiveEmployeesOnAListOrATable()
Admin have successfully listed all employees on a list
  Then admin is successfully able to view all employees on the active list # steps.ActiveEmployees.adminIsSuccessfullyAbleToViewAllEmployeesOnTheActiveList()

    Embedding admin can access and view a comprehensive employee directory [image/png 91313 bytes]

]]></system-out>
  </testcase>
  <testcase name="Employee adds dependents #1" classname="Employee can manage the dependents in the HRMS application" time="20.284">
    <system-out><![CDATA[
@Aya @dependent
Scenario Outline: Employee adds dependents                                           # src/test/resources/features/addDependents11.feature:18
  Given user is logged into the HRMS system application                              # steps.AddDependentsSteps.user_is_logged_into_the_hrms_system_application()
  Then user clicks on PIM option and Employee list option                            # steps.AddDependentsSteps.user_clicks_on_pim_option_and_employee_list_option()
  And user enters valid employee id                                                  # steps.AddDependentsSteps.user_enters_valid_employee_id()
  And user clicks on search button                                                   # steps.AddDependentsSteps.user_clicks_on_search_button()
  And user selects the employee file                                                 # steps.AddDependentsSteps.user_selects_the_employee_file()
  And user navigates to the dependents section                                       # steps.AddDependentsSteps.user_navigates_to_the_dependents_section()
  Then user click on Add button                                                      # steps.AddDependentsSteps.userClickOnAddButton()
  Then the user enters "John Doe" and "Other" and "1990-05-15" in data driven format # steps.AddDependentsSteps.theUserEntersAndAndInDataDrivenFormat(java.lang.String,java.lang.String,java.lang.String)

    Embedding Employee adds dependents [image/png 197907 bytes]

]]></system-out>
  </testcase>
  <testcase name="Employee adds dependents #2" classname="Employee can manage the dependents in the HRMS application" time="20.594">
    <system-out><![CDATA[
@Aya @dependent
Scenario Outline: Employee adds dependents                                             # src/test/resources/features/addDependents11.feature:19
  Given user is logged into the HRMS system application                                # steps.AddDependentsSteps.user_is_logged_into_the_hrms_system_application()
  Then user clicks on PIM option and Employee list option                              # steps.AddDependentsSteps.user_clicks_on_pim_option_and_employee_list_option()
  And user enters valid employee id                                                    # steps.AddDependentsSteps.user_enters_valid_employee_id()
  And user clicks on search button                                                     # steps.AddDependentsSteps.user_clicks_on_search_button()
  And user selects the employee file                                                   # steps.AddDependentsSteps.user_selects_the_employee_file()
  And user navigates to the dependents section                                         # steps.AddDependentsSteps.user_navigates_to_the_dependents_section()
  Then user click on Add button                                                        # steps.AddDependentsSteps.userClickOnAddButton()
  Then the user enters "Jane Smith" and "Child" and "2010-10-08" in data driven format # steps.AddDependentsSteps.theUserEntersAndAndInDataDrivenFormat(java.lang.String,java.lang.String,java.lang.String)

    Embedding Employee adds dependents [image/png 197834 bytes]

]]></system-out>
  </testcase>
  <testcase name="Employee adds dependents #3" classname="Employee can manage the dependents in the HRMS application" time="20.627">
    <system-out><![CDATA[
@Aya @dependent
Scenario Outline: Employee adds dependents                                               # src/test/resources/features/addDependents11.feature:20
  Given user is logged into the HRMS system application                                  # steps.AddDependentsSteps.user_is_logged_into_the_hrms_system_application()
  Then user clicks on PIM option and Employee list option                                # steps.AddDependentsSteps.user_clicks_on_pim_option_and_employee_list_option()
  And user enters valid employee id                                                      # steps.AddDependentsSteps.user_enters_valid_employee_id()
  And user clicks on search button                                                       # steps.AddDependentsSteps.user_clicks_on_search_button()
  And user selects the employee file                                                     # steps.AddDependentsSteps.user_selects_the_employee_file()
  And user navigates to the dependents section                                           # steps.AddDependentsSteps.user_navigates_to_the_dependents_section()
  Then user click on Add button                                                          # steps.AddDependentsSteps.userClickOnAddButton()
  Then the user enters "John Doe Jr." and "Child" and "2015-02-20" in data driven format # steps.AddDependentsSteps.theUserEntersAndAndInDataDrivenFormat(java.lang.String,java.lang.String,java.lang.String)

    Embedding Employee adds dependents [image/png 197863 bytes]

]]></system-out>
  </testcase>
  <testcase name="the HRMS system should show error message in case of invalid inserts" classname="Employee can manage the dependents in the HRMS application" time="19.482">
    <system-out><![CDATA[
@Aya @dependent
Scenario Outline: the HRMS system should show error message in case of invalid inserts        # src/test/resources/features/addDependents11.feature:32
  Given user is logged into the HRMS system application                                       # steps.AddDependentsSteps.user_is_logged_into_the_hrms_system_application()
  Then user clicks on PIM option and Employee list option                                     # steps.AddDependentsSteps.user_clicks_on_pim_option_and_employee_list_option()
  And user enters valid employee id                                                           # steps.AddDependentsSteps.user_enters_valid_employee_id()
  And user clicks on search button                                                            # steps.AddDependentsSteps.user_clicks_on_search_button()
  And user selects the employee file                                                          # steps.AddDependentsSteps.user_selects_the_employee_file()
  And user navigates to the dependents section                                                # steps.AddDependentsSteps.user_navigates_to_the_dependents_section()
  Then user click on Add button                                                               # steps.AddDependentsSteps.userClickOnAddButton()
  When user enters invalid information "Helene" and "1990-05-15" and verifying the "Required" # steps.AddDependentsSteps.userEntersInvalidInformationAndAndVerifyingThe(java.lang.String,java.lang.String,java.lang.String)
Error message is displayed
  Then the HRMS application displays error messages                                           # steps.AddDependentsSteps.the_hrms_application_displays_error_messages()

    Embedding the HRMS system should show error message in case of invalid inserts [image/png 210448 bytes]

]]></system-out>
  </testcase>
  <testcase name="Employee should be able to remove dependents" classname="Employee can manage the dependents in the HRMS application" time="19.229">
    <system-out><![CDATA[
@dependent @Aya
Scenario: Employee should be able to remove dependents                                              # src/test/resources/features/addDependents11.feature:36
  Given user is logged into the HRMS system application                                             # steps.AddDependentsSteps.user_is_logged_into_the_hrms_system_application()
  Then user clicks on PIM option and Employee list option                                           # steps.AddDependentsSteps.user_clicks_on_pim_option_and_employee_list_option()
  And user enters valid employee id                                                                 # steps.AddDependentsSteps.user_enters_valid_employee_id()
  And user clicks on search button                                                                  # steps.AddDependentsSteps.user_clicks_on_search_button()
  And user selects the employee file                                                                # steps.AddDependentsSteps.user_selects_the_employee_file()
  And user navigates to the dependents section                                                      # steps.AddDependentsSteps.user_navigates_to_the_dependents_section()
  When user removes the second dependent from the list                                              # steps.AddDependentsSteps.user_removes_the_second_dependent_from_the_list()
  Then the HRMS application should no longer display the second dependent in the list of dependents # steps.AddDependentsSteps.the_hrms_application_should_no_longer_display_the_second_dependent_in_the_list_of_dependents()

    Embedding Employee should be able to remove dependents [image/png 197999 bytes]

]]></system-out>
  </testcase>
  <testcase name="Admin add different languages to employees" classname="EMPTY_NAME" time="20.593">
    <system-out><![CDATA[
@languages
Scenario: Admin add different languages to employees # src/test/resources/features/adminAddDifferentLanguages.feature:4
  Given Admin logged in                              # steps.adminAddDifferentLanguages.admin_logged_in()
  When Admin navigates to qualification              # steps.adminAddDifferentLanguages.admin_navigates_to_qualification()
  And Select languages                               # steps.adminAddDifferentLanguages.select_languages()
  Then Admin can add any language                    # steps.adminAddDifferentLanguages.admin_can_add_any_language()

    Embedding Admin add different languages to employees [image/png 68839 bytes]

]]></system-out>
  </testcase>
  <testcase name="edit Job Title field" classname="Admin can access the employee&apos;s profile and add current job details" time="35.019">
    <system-out><![CDATA[
@adminEdit
Scenario: edit Job Title field                         # src/test/resources/features/adminAddJobDetails.feature:20
  When admin enters valid username and password        # steps.AdminLoginSteps.adminEntersValidUsernameAndPassword()
  And admin clicks on login button                     # steps.AdminLoginSteps.adminClicksOnLoginButton()
Admin has successfully loged into application
  Then admin is successfully logged in the application # steps.AdminLoginSteps.adminIsSuccessfullyLoggedInTheApplication()
  When admin clicks on PIM and employee list option    # steps.AdminAddJobDetailsSteps.adminClicksOnPIMAndEmployeeListOption()
  And admin enter valid employee id                    # steps.AdminAddJobDetailsSteps.adminEnterValidEmployeeId()
  And admin clicks on search button                    # steps.AdminAddJobDetailsSteps.adminClicksOnSearchButton()
  And admin clicks on employee's profile               # steps.AdminAddJobDetailsSteps.adminClicksOnEmployeeSProfile()
Admin is able to see employee information
  Then admin is able to see employee information       # steps.AdminAddJobDetailsSteps.adminIsAbleToSeeEmployeeInformation()
  When admin clicks on Job                             # steps.AdminAddJobDetailsSteps.adminClicksOnJob()
  And admin clicks on edit button                      # steps.AdminAddJobDetailsSteps.adminClicksOnEditButton()
Admin user is able to edit the employee information
  Then admin is able to edit Job information           # steps.AdminAddJobDetailsSteps.adminIsAbleToEditJobInformation()
  When admin clicks on Job Title dropdown              # steps.AdminAddJobDetailsSteps.adminClicksOnJobTitleDropdown()
  And admin can select job title of the employee       # steps.AdminAddJobDetailsSteps.adminCanSelectJobTitleOfTheEmployee()
Admin is able to save the changes if completed
  Then admin is able to save the changes               # steps.AdminAddJobDetailsSteps.adminIsAbleToSaveTheChanges()

    Embedding edit Job Title field [image/png 122521 bytes]

]]></system-out>
  </testcase>
  <testcase name="edit Employment Status field" classname="Admin can access the employee&apos;s profile and add current job details" time="34.14">
    <system-out><![CDATA[
@adminEdit
Scenario: edit Employment Status field                   # src/test/resources/features/adminAddJobDetails.feature:26
  When admin enters valid username and password          # steps.AdminLoginSteps.adminEntersValidUsernameAndPassword()
  And admin clicks on login button                       # steps.AdminLoginSteps.adminClicksOnLoginButton()
Admin has successfully loged into application
  Then admin is successfully logged in the application   # steps.AdminLoginSteps.adminIsSuccessfullyLoggedInTheApplication()
  When admin clicks on PIM and employee list option      # steps.AdminAddJobDetailsSteps.adminClicksOnPIMAndEmployeeListOption()
  And admin enter valid employee id                      # steps.AdminAddJobDetailsSteps.adminEnterValidEmployeeId()
  And admin clicks on search button                      # steps.AdminAddJobDetailsSteps.adminClicksOnSearchButton()
  And admin clicks on employee's profile                 # steps.AdminAddJobDetailsSteps.adminClicksOnEmployeeSProfile()
Admin is able to see employee information
  Then admin is able to see employee information         # steps.AdminAddJobDetailsSteps.adminIsAbleToSeeEmployeeInformation()
  When admin clicks on Job                               # steps.AdminAddJobDetailsSteps.adminClicksOnJob()
  And admin clicks on edit button                        # steps.AdminAddJobDetailsSteps.adminClicksOnEditButton()
Admin user is able to edit the employee information
  Then admin is able to edit Job information             # steps.AdminAddJobDetailsSteps.adminIsAbleToEditJobInformation()
  When admin clicks on Employment status dropdown        # steps.AdminAddJobDetailsSteps.adminClicksOnEmploymentStatusDropdown()
  And admin can select employment status of the employee # steps.AdminAddJobDetailsSteps.adminCanSelectEmploymentStatusOfTheEmployee()
Admin is able to save the changes if completed
  Then admin is able to save the changes                 # steps.AdminAddJobDetailsSteps.adminIsAbleToSaveTheChanges()

    Embedding edit Employment Status field [image/png 117560 bytes]

]]></system-out>
  </testcase>
  <testcase name="edit Job Category field" classname="Admin can access the employee&apos;s profile and add current job details" time="35.344">
    <system-out><![CDATA[
@adminEdit
Scenario: edit Job Category field                      # src/test/resources/features/adminAddJobDetails.feature:32
  When admin enters valid username and password        # steps.AdminLoginSteps.adminEntersValidUsernameAndPassword()
  And admin clicks on login button                     # steps.AdminLoginSteps.adminClicksOnLoginButton()
Admin has successfully loged into application
  Then admin is successfully logged in the application # steps.AdminLoginSteps.adminIsSuccessfullyLoggedInTheApplication()
  When admin clicks on PIM and employee list option    # steps.AdminAddJobDetailsSteps.adminClicksOnPIMAndEmployeeListOption()
  And admin enter valid employee id                    # steps.AdminAddJobDetailsSteps.adminEnterValidEmployeeId()
  And admin clicks on search button                    # steps.AdminAddJobDetailsSteps.adminClicksOnSearchButton()
  And admin clicks on employee's profile               # steps.AdminAddJobDetailsSteps.adminClicksOnEmployeeSProfile()
Admin is able to see employee information
  Then admin is able to see employee information       # steps.AdminAddJobDetailsSteps.adminIsAbleToSeeEmployeeInformation()
  When admin clicks on Job                             # steps.AdminAddJobDetailsSteps.adminClicksOnJob()
  And admin clicks on edit button                      # steps.AdminAddJobDetailsSteps.adminClicksOnEditButton()
Admin user is able to edit the employee information
  Then admin is able to edit Job information           # steps.AdminAddJobDetailsSteps.adminIsAbleToEditJobInformation()
  When admin clicks on Job Category dropdown           # steps.AdminAddJobDetailsSteps.adminClicksOnJobCategoryDropdown()
  And admin can select job category of the employee    # steps.AdminAddJobDetailsSteps.adminCanSelectJobCategoryOfTheEmployee()
Admin is able to save the changes if completed
  Then admin is able to save the changes               # steps.AdminAddJobDetailsSteps.adminIsAbleToSaveTheChanges()

    Embedding edit Job Category field [image/png 118422 bytes]

]]></system-out>
  </testcase>
  <testcase name="edit Joined Date field" classname="Admin can access the employee&apos;s profile and add current job details" time="33.338">
    <system-out><![CDATA[
@adminEdit
Scenario: edit Joined Date field                                          # src/test/resources/features/adminAddJobDetails.feature:38
  When admin enters valid username and password                           # steps.AdminLoginSteps.adminEntersValidUsernameAndPassword()
  And admin clicks on login button                                        # steps.AdminLoginSteps.adminClicksOnLoginButton()
Admin has successfully loged into application
  Then admin is successfully logged in the application                    # steps.AdminLoginSteps.adminIsSuccessfullyLoggedInTheApplication()
  When admin clicks on PIM and employee list option                       # steps.AdminAddJobDetailsSteps.adminClicksOnPIMAndEmployeeListOption()
  And admin enter valid employee id                                       # steps.AdminAddJobDetailsSteps.adminEnterValidEmployeeId()
  And admin clicks on search button                                       # steps.AdminAddJobDetailsSteps.adminClicksOnSearchButton()
  And admin clicks on employee's profile                                  # steps.AdminAddJobDetailsSteps.adminClicksOnEmployeeSProfile()
Admin is able to see employee information
  Then admin is able to see employee information                          # steps.AdminAddJobDetailsSteps.adminIsAbleToSeeEmployeeInformation()
  When admin clicks on Job                                                # steps.AdminAddJobDetailsSteps.adminClicksOnJob()
  And admin clicks on edit button                                         # steps.AdminAddJobDetailsSteps.adminClicksOnEditButton()
Admin user is able to edit the employee information
  Then admin is able to edit Job information                              # steps.AdminAddJobDetailsSteps.adminIsAbleToEditJobInformation()
  When admin clicks on Joined Date calendar                               # steps.AdminAddJobDetailsSteps.adminClicksOnJoinedDateCalendar()
  And admin can select the date when the employee joined the organization # steps.AdminAddJobDetailsSteps.adminCanSelectTheDateWhenTheEmployeeJoinedTheOrganization()
  And admin can select the month when employee joined the organization    # steps.AdminAddJobDetailsSteps.adminCanSelectTheMonthWhenEmployeeJoinedTheOrganization()
  And admin can select the year when employee joined the organization     # steps.AdminAddJobDetailsSteps.adminCanSelectTheYearWhenEmployeeJoinedTheOrganization()
Admin is able to save the changes if completed
  Then admin is able to save the changes                                  # steps.AdminAddJobDetailsSteps.adminIsAbleToSaveTheChanges()

    Embedding edit Joined Date field [image/png 126345 bytes]

]]></system-out>
  </testcase>
  <testcase name="edit Sub Unit field" classname="Admin can access the employee&apos;s profile and add current job details" time="33.998">
    <system-out><![CDATA[
@adminEdit
Scenario: edit Sub Unit field                                               # src/test/resources/features/adminAddJobDetails.feature:46
  When admin enters valid username and password                             # steps.AdminLoginSteps.adminEntersValidUsernameAndPassword()
  And admin clicks on login button                                          # steps.AdminLoginSteps.adminClicksOnLoginButton()
Admin has successfully loged into application
  Then admin is successfully logged in the application                      # steps.AdminLoginSteps.adminIsSuccessfullyLoggedInTheApplication()
  When admin clicks on PIM and employee list option                         # steps.AdminAddJobDetailsSteps.adminClicksOnPIMAndEmployeeListOption()
  And admin enter valid employee id                                         # steps.AdminAddJobDetailsSteps.adminEnterValidEmployeeId()
  And admin clicks on search button                                         # steps.AdminAddJobDetailsSteps.adminClicksOnSearchButton()
  And admin clicks on employee's profile                                    # steps.AdminAddJobDetailsSteps.adminClicksOnEmployeeSProfile()
Admin is able to see employee information
  Then admin is able to see employee information                            # steps.AdminAddJobDetailsSteps.adminIsAbleToSeeEmployeeInformation()
  When admin clicks on Job                                                  # steps.AdminAddJobDetailsSteps.adminClicksOnJob()
  And admin clicks on edit button                                           # steps.AdminAddJobDetailsSteps.adminClicksOnEditButton()
Admin user is able to edit the employee information
  Then admin is able to edit Job information                                # steps.AdminAddJobDetailsSteps.adminIsAbleToEditJobInformation()
  When admin clicks on Sub Unit dropdown                                    # steps.AdminAddJobDetailsSteps.adminClicksOnSubUnitDropdown()
  And admin can select the sub unit where the employee is currently working # steps.AdminAddJobDetailsSteps.adminCanSelectTheSubUnitWhereTheEmployeeIsCurrentlyWorking()
Admin is able to save the changes if completed
  Then admin is able to save the changes                                    # steps.AdminAddJobDetailsSteps.adminIsAbleToSaveTheChanges()

    Embedding edit Sub Unit field [image/png 115859 bytes]

]]></system-out>
  </testcase>
  <testcase name="edit Location field" classname="Admin can access the employee&apos;s profile and add current job details" time="35.735">
    <system-out><![CDATA[
@adminEdit
Scenario: edit Location field                                           # src/test/resources/features/adminAddJobDetails.feature:52
  When admin enters valid username and password                         # steps.AdminLoginSteps.adminEntersValidUsernameAndPassword()
  And admin clicks on login button                                      # steps.AdminLoginSteps.adminClicksOnLoginButton()
Admin has successfully loged into application
  Then admin is successfully logged in the application                  # steps.AdminLoginSteps.adminIsSuccessfullyLoggedInTheApplication()
  When admin clicks on PIM and employee list option                     # steps.AdminAddJobDetailsSteps.adminClicksOnPIMAndEmployeeListOption()
  And admin enter valid employee id                                     # steps.AdminAddJobDetailsSteps.adminEnterValidEmployeeId()
  And admin clicks on search button                                     # steps.AdminAddJobDetailsSteps.adminClicksOnSearchButton()
  And admin clicks on employee's profile                                # steps.AdminAddJobDetailsSteps.adminClicksOnEmployeeSProfile()
Admin is able to see employee information
  Then admin is able to see employee information                        # steps.AdminAddJobDetailsSteps.adminIsAbleToSeeEmployeeInformation()
  When admin clicks on Job                                              # steps.AdminAddJobDetailsSteps.adminClicksOnJob()
  And admin clicks on edit button                                       # steps.AdminAddJobDetailsSteps.adminClicksOnEditButton()
Admin user is able to edit the employee information
  Then admin is able to edit Job information                            # steps.AdminAddJobDetailsSteps.adminIsAbleToEditJobInformation()
  When admin clicks on Location dropdown                                # steps.AdminAddJobDetailsSteps.adminClicksOnLocationDropdown()
  And admin can select the location where employee is currently working # steps.AdminAddJobDetailsSteps.adminCanSelectTheLocationWhereEmployeeIsCurrentlyWorking()
Admin is able to save the changes if completed
  Then admin is able to save the changes                                # steps.AdminAddJobDetailsSteps.adminIsAbleToSaveTheChanges()

    Embedding edit Location field [image/png 121308 bytes]

]]></system-out>
  </testcase>
  <testcase name="edit Start date field" classname="Admin can access the employee&apos;s profile and add current job details" time="35.003">
    <system-out><![CDATA[
@adminEdit
Scenario: edit Start date field                                    # src/test/resources/features/adminAddJobDetails.feature:58
  When admin enters valid username and password                    # steps.AdminLoginSteps.adminEntersValidUsernameAndPassword()
  And admin clicks on login button                                 # steps.AdminLoginSteps.adminClicksOnLoginButton()
Admin has successfully loged into application
  Then admin is successfully logged in the application             # steps.AdminLoginSteps.adminIsSuccessfullyLoggedInTheApplication()
  When admin clicks on PIM and employee list option                # steps.AdminAddJobDetailsSteps.adminClicksOnPIMAndEmployeeListOption()
  And admin enter valid employee id                                # steps.AdminAddJobDetailsSteps.adminEnterValidEmployeeId()
  And admin clicks on search button                                # steps.AdminAddJobDetailsSteps.adminClicksOnSearchButton()
  And admin clicks on employee's profile                           # steps.AdminAddJobDetailsSteps.adminClicksOnEmployeeSProfile()
Admin is able to see employee information
  Then admin is able to see employee information                   # steps.AdminAddJobDetailsSteps.adminIsAbleToSeeEmployeeInformation()
  When admin clicks on Job                                         # steps.AdminAddJobDetailsSteps.adminClicksOnJob()
  And admin clicks on edit button                                  # steps.AdminAddJobDetailsSteps.adminClicksOnEditButton()
Admin user is able to edit the employee information
  Then admin is able to edit Job information                       # steps.AdminAddJobDetailsSteps.adminIsAbleToEditJobInformation()
  When admin clicks on Start date calender                         # steps.AdminAddJobDetailsSteps.adminClicksOnStartDateCalender()
  And admin can select the starting date of employee's current job # steps.AdminAddJobDetailsSteps.adminCanSelectTheStartingDateOfEmployeeSCurrentJob()
Admin is able to save the changes if completed
  Then admin is able to save the changes                           # steps.AdminAddJobDetailsSteps.adminIsAbleToSaveTheChanges()

    Embedding edit Start date field [image/png 121460 bytes]

]]></system-out>
  </testcase>
  <testcase name="edit End date field" classname="Admin can access the employee&apos;s profile and add current job details" time="34.581">
    <system-out><![CDATA[
@adminEdit
Scenario: edit End date field                                 # src/test/resources/features/adminAddJobDetails.feature:64
  When admin enters valid username and password               # steps.AdminLoginSteps.adminEntersValidUsernameAndPassword()
  And admin clicks on login button                            # steps.AdminLoginSteps.adminClicksOnLoginButton()
Admin has successfully loged into application
  Then admin is successfully logged in the application        # steps.AdminLoginSteps.adminIsSuccessfullyLoggedInTheApplication()
  When admin clicks on PIM and employee list option           # steps.AdminAddJobDetailsSteps.adminClicksOnPIMAndEmployeeListOption()
  And admin enter valid employee id                           # steps.AdminAddJobDetailsSteps.adminEnterValidEmployeeId()
  And admin clicks on search button                           # steps.AdminAddJobDetailsSteps.adminClicksOnSearchButton()
  And admin clicks on employee's profile                      # steps.AdminAddJobDetailsSteps.adminClicksOnEmployeeSProfile()
Admin is able to see employee information
  Then admin is able to see employee information              # steps.AdminAddJobDetailsSteps.adminIsAbleToSeeEmployeeInformation()
  When admin clicks on Job                                    # steps.AdminAddJobDetailsSteps.adminClicksOnJob()
  And admin clicks on edit button                             # steps.AdminAddJobDetailsSteps.adminClicksOnEditButton()
Admin user is able to edit the employee information
  Then admin is able to edit Job information                  # steps.AdminAddJobDetailsSteps.adminIsAbleToEditJobInformation()
  When admin clicks on End date calender                      # steps.AdminAddJobDetailsSteps.adminClicksOnEndDateCalender()
  And admin can select the end date of employee's current job # steps.AdminAddJobDetailsSteps.adminCanSelectTheEndDateOfEmployeeSCurrentJob()
Admin is able to save the changes if completed
  Then admin is able to save the changes                      # steps.AdminAddJobDetailsSteps.adminIsAbleToSaveTheChanges()

    Embedding edit End date field [image/png 122426 bytes]

]]></system-out>
  </testcase>
  <testcase name="edit Contract details field" classname="Admin can access the employee&apos;s profile and add current job details" time="36.875">
    <system-out><![CDATA[
@adminEdit
Scenario: edit Contract details field                             # src/test/resources/features/adminAddJobDetails.feature:70
  When admin enters valid username and password                   # steps.AdminLoginSteps.adminEntersValidUsernameAndPassword()
  And admin clicks on login button                                # steps.AdminLoginSteps.adminClicksOnLoginButton()
Admin has successfully loged into application
  Then admin is successfully logged in the application            # steps.AdminLoginSteps.adminIsSuccessfullyLoggedInTheApplication()
  When admin clicks on PIM and employee list option               # steps.AdminAddJobDetailsSteps.adminClicksOnPIMAndEmployeeListOption()
  And admin enter valid employee id                               # steps.AdminAddJobDetailsSteps.adminEnterValidEmployeeId()
  And admin clicks on search button                               # steps.AdminAddJobDetailsSteps.adminClicksOnSearchButton()
  And admin clicks on employee's profile                          # steps.AdminAddJobDetailsSteps.adminClicksOnEmployeeSProfile()
Admin is able to see employee information
  Then admin is able to see employee information                  # steps.AdminAddJobDetailsSteps.adminIsAbleToSeeEmployeeInformation()
  When admin clicks on Job                                        # steps.AdminAddJobDetailsSteps.adminClicksOnJob()
  And admin clicks on edit button                                 # steps.AdminAddJobDetailsSteps.adminClicksOnEditButton()
Admin user is able to edit the employee information
  Then admin is able to edit Job information                      # steps.AdminAddJobDetailsSteps.adminIsAbleToEditJobInformation()
  When admin clicks on Choose file button and uploads information # steps.AdminAddJobDetailsSteps.adminClicksOnChooseFileButton()
  And admin clicks on Save button                                 # steps.AdminAddJobDetailsSteps.adminClicksOnSaveButton()
Admin is able to save the changes if completed
  Then admin is able to save the changes                          # steps.AdminAddJobDetailsSteps.adminIsAbleToSaveTheChanges()

    Embedding edit Contract details field [image/png 113336 bytes]

]]></system-out>
  </testcase>
  <testcase name="Valid admin login" classname="Admin logs into HRMS application" time="4.236">
    <system-out><![CDATA[
@adminLogin
Scenario: Valid admin login                            # src/test/resources/features/adminUserLogin.feature:6
  When admin enters valid username and password        # steps.AdminLoginSteps.adminEntersValidUsernameAndPassword()
  And admin clicks on login button                     # steps.AdminLoginSteps.adminClicksOnLoginButton()
Admin has successfully loged into application
  Then admin is successfully logged in the application # steps.AdminLoginSteps.adminIsSuccessfullyLoggedInTheApplication()

    Embedding Valid admin login [image/png 58211 bytes]

]]></system-out>
  </testcase>
  <testcase name=" #1" classname="Admin add membership" time="13.702">
    <system-out><![CDATA[
@admin @Daniel2
Scenario Outline:                             # src/test/resources/features/adminaddmembership.feature:13
  Given user is navigated to HRMS application # steps.TerminateEmployeeScenario.userIsNavigatedToHRMSApplication()
  When admin navigates to Qualifications Page # steps.AdminAddMembership.adminNavigatesToQualificationsPage()
  And selects memberships                     # steps.AdminAddMembership.selectsMemberships()
0Amazon  Then admin user can add any "0Amazon"       # steps.AdminAddMembership.adminUserCanAddAny(java.lang.String)

    Embedding  [image/png 71824 bytes]

]]></system-out>
  </testcase>
  <testcase name=" #2" classname="Admin add membership" time="14.02">
    <system-out><![CDATA[
@admin @Daniel2
Scenario Outline:                             # src/test/resources/features/adminaddmembership.feature:14
  Given user is navigated to HRMS application # steps.TerminateEmployeeScenario.userIsNavigatedToHRMSApplication()
  When admin navigates to Qualifications Page # steps.AdminAddMembership.adminNavigatesToQualificationsPage()
  And selects memberships                     # steps.AdminAddMembership.selectsMemberships()
0Binance  Then admin user can add any "0Binance"      # steps.AdminAddMembership.adminUserCanAddAny(java.lang.String)

    Embedding  [image/png 71824 bytes]

]]></system-out>
  </testcase>
  <testcase name=" #3" classname="Admin add membership" time="14.291">
    <system-out><![CDATA[
@admin @Daniel2
Scenario Outline:                             # src/test/resources/features/adminaddmembership.feature:15
  Given user is navigated to HRMS application # steps.TerminateEmployeeScenario.userIsNavigatedToHRMSApplication()
  When admin navigates to Qualifications Page # steps.AdminAddMembership.adminNavigatesToQualificationsPage()
  And selects memberships                     # steps.AdminAddMembership.selectsMemberships()
0Craft  Then admin user can add any "0Craft"        # steps.AdminAddMembership.adminUserCanAddAny(java.lang.String)

    Embedding  [image/png 71824 bytes]

]]></system-out>
  </testcase>
  <testcase name="admin can terminate employee by id #1" classname="Admin terminates employment" time="36.437">
    <system-out><![CDATA[
@admin @Daniel1
Scenario Outline: admin can terminate employee by id   # src/test/resources/features/adminterminateemployment.feature:20
  When admin enters valid username and password        # steps.AdminLoginSteps.adminEntersValidUsernameAndPassword()
  And admin clicks on login button                     # steps.AdminLoginSteps.adminClicksOnLoginButton()
Admin has successfully loged into application
  Then admin is successfully logged in the application # steps.AdminLoginSteps.adminIsSuccessfullyLoggedInTheApplication()
  When admin clicks on PIM and employee list option    # steps.AdminAddJobDetailsSteps.adminClicksOnPIMAndEmployeeListOption()
90040A
  When admin enters "90040A" and searches employee     # steps.TerminateEmployeeScenario.adminEntersAndSearchesEmployee(java.lang.String)
  And admin clicks on id and navigates to job details  # steps.TerminateEmployeeScenario.adminClicksOnIdAndNavigatesToJobDetails()
  When admin clicks terminate btn and gives a reason   # steps.TerminateEmployeeScenario.adminClicksTerminateBtnAndGivesAReason()
  Then validate employee terminated                    # steps.TerminateEmployeeScenario.validateEmployeeTerminated()

    Embedding admin can terminate employee by id [image/png 115426 bytes]

]]></system-out>
  </testcase>
  <testcase name="admin can terminate employee by id #2" classname="Admin terminates employment" time="38.947">
    <system-out><![CDATA[
@admin @Daniel1
Scenario Outline: admin can terminate employee by id   # src/test/resources/features/adminterminateemployment.feature:21
  When admin enters valid username and password        # steps.AdminLoginSteps.adminEntersValidUsernameAndPassword()
  And admin clicks on login button                     # steps.AdminLoginSteps.adminClicksOnLoginButton()
Admin has successfully loged into application
  Then admin is successfully logged in the application # steps.AdminLoginSteps.adminIsSuccessfullyLoggedInTheApplication()
  When admin clicks on PIM and employee list option    # steps.AdminAddJobDetailsSteps.adminClicksOnPIMAndEmployeeListOption()
90055A
  When admin enters "90055A" and searches employee     # steps.TerminateEmployeeScenario.adminEntersAndSearchesEmployee(java.lang.String)
  And admin clicks on id and navigates to job details  # steps.TerminateEmployeeScenario.adminClicksOnIdAndNavigatesToJobDetails()
  When admin clicks terminate btn and gives a reason   # steps.TerminateEmployeeScenario.adminClicksTerminateBtnAndGivesAReason()
  Then validate employee terminated                    # steps.TerminateEmployeeScenario.validateEmployeeTerminated()

    Embedding admin can terminate employee by id [image/png 115426 bytes]

]]></system-out>
  </testcase>
  <testcase name="admin can terminate employee by id #3" classname="Admin terminates employment" time="39.516">
    <system-out><![CDATA[
@admin @Daniel1
Scenario Outline: admin can terminate employee by id   # src/test/resources/features/adminterminateemployment.feature:22
  When admin enters valid username and password        # steps.AdminLoginSteps.adminEntersValidUsernameAndPassword()
  And admin clicks on login button                     # steps.AdminLoginSteps.adminClicksOnLoginButton()
Admin has successfully loged into application
  Then admin is successfully logged in the application # steps.AdminLoginSteps.adminIsSuccessfullyLoggedInTheApplication()
  When admin clicks on PIM and employee list option    # steps.AdminAddJobDetailsSteps.adminClicksOnPIMAndEmployeeListOption()
90056A
  When admin enters "90056A" and searches employee     # steps.TerminateEmployeeScenario.adminEntersAndSearchesEmployee(java.lang.String)
  And admin clicks on id and navigates to job details  # steps.TerminateEmployeeScenario.adminClicksOnIdAndNavigatesToJobDetails()
  When admin clicks terminate btn and gives a reason   # steps.TerminateEmployeeScenario.adminClicksTerminateBtnAndGivesAReason()
  Then validate employee terminated                    # steps.TerminateEmployeeScenario.validateEmployeeTerminated()

    Embedding admin can terminate employee by id [image/png 115426 bytes]

]]></system-out>
  </testcase>
  <testcase name="Adding language proficiency information" classname="Employee adds details" time="10.875">
    <system-out><![CDATA[
@language
Scenario: Adding language proficiency information                                # src/test/resources/features/employeeAddsLanguageProficiencyDetails.feature:16
  When employee  enters valid employee username and password                     # steps.EmployeeAddsLanguageProficiencyDetailsSteps.employee_enters_valid_employee_username_and_password()
  And employee  clicks on login button                                           # steps.EmployeeAddsLanguageProficiencyDetailsSteps.employee_clicks_on_login_button()
Employee logged in
  Then employee  is successfully logged in the application                       # steps.EmployeeAddsLanguageProficiencyDetailsSteps.employee_is_successfully_logged_in_the_application()
  When employee clicks on My Info tab1                                           # steps.EmployeeAddsLanguageProficiencyDetailsSteps.employee_clicks_on_my_info_tab()
  And employee clicks on Qualifications option                                   # steps.EmployeeAddsLanguageProficiencyDetailsSteps.employee_clicks_on_qualifications_option()
  And employee clicks on add button                                              # steps.EmployeeAddsLanguageProficiencyDetailsSteps.employee_clicks_on_add_button()
  And employee selects language dropdown                                         # steps.EmployeeAddsLanguageProficiencyDetailsSteps.employee_selects_language_dropdown()
  And employee selects fluency dropdown                                          # steps.EmployeeAddsLanguageProficiencyDetailsSteps.employee_selects_fluency_dropdown()
  And employee selects competency dropdown                                       # steps.EmployeeAddsLanguageProficiencyDetailsSteps.employee_selects_competency_dropdown()
  And employee adds text in comment text box                                     # steps.EmployeeAddsLanguageProficiencyDetailsSteps.employee_adds_text_in_comment_text_box()
All mandatory fields are filled in
  Then system should validate that mandatory fields are filled in                # steps.EmployeeAddsLanguageProficiencyDetailsSteps.system_should_validate_that_mandatory_fields_are_filled_in()
  Then employee clicks on save button                                            # steps.EmployeeAddsLanguageProficiencyDetailsSteps.employee_clicks_on_save_button()
You have successfully stored your language proficiency details
  And the system stores the language proficiency details in the employee profile # steps.EmployeeAddsLanguageProficiencyDetailsSteps.the_system_stores_the_language_proficiency_details_in_the_employee_profile()

    Embedding Adding language proficiency information [image/png 42530 bytes]

]]></system-out>
  </testcase>
  <testcase name="Deleting previously saved language details" classname="Employee adds details" time="8.599">
    <system-out><![CDATA[
@language
Scenario: Deleting previously saved language details         # src/test/resources/features/employeeAddsLanguageProficiencyDetails.feature:28
  When employee  enters valid employee username and password # steps.EmployeeAddsLanguageProficiencyDetailsSteps.employee_enters_valid_employee_username_and_password()
  And employee  clicks on login button                       # steps.EmployeeAddsLanguageProficiencyDetailsSteps.employee_clicks_on_login_button()
Employee logged in
  Then employee  is successfully logged in the application   # steps.EmployeeAddsLanguageProficiencyDetailsSteps.employee_is_successfully_logged_in_the_application()
  When employee clicks on My Info tab1                       # steps.EmployeeAddsLanguageProficiencyDetailsSteps.employee_clicks_on_my_info_tab()
  And employee clicks on Qualifications option               # steps.EmployeeAddsLanguageProficiencyDetailsSteps.employee_clicks_on_qualifications_option()
  When employee checks a check box                           # steps.EmployeeAddsLanguageProficiencyDetailsSteps.employee_checks_a_check_box()
  And employee clicks on delete button                       # steps.EmployeeAddsLanguageProficiencyDetailsSteps.employee_clicks_on_delete_button()
Successfully deleted
  Then employee successfully deletes his language details    # steps.EmployeeAddsLanguageProficiencyDetailsSteps.employee_successfully_deletes_his_language_details()

    Embedding Deleting previously saved language details [image/png 39017 bytes]

]]></system-out>
  </testcase>
  <testcase name="Update personal information" classname="Employee Contact Details Update" time="8.821">
    <system-out><![CDATA[
@contactDetails
Scenario: Update personal information                   # src/test/resources/features/employeeContactDetails.feature:4
  Given the employee navigated on HRMS site             # steps.EmployeeContactDetails.theEmployeeNavigatedOnHRMSSite()
  When employee enters valid username and password      # steps.EmployeeContactDetails.employeeEntersValidUsernameAndPassword()
  And employee clicks on login button                   # steps.EmployeeContactDetails.employeeClicksOnLoginButton()
The employee logged in
  Then employee has successfully navigated to HRMS site # steps.EmployeeContactDetails.employeeHasSuccessfullyNavigatedToHRMSSite()
  When employee clicks on My Info tab                   # steps.EmployeeContactDetails.employeeClicksOnMyInfoTab()
  And employee clicks on Edit button                    # steps.EmployeeContactDetails.employeeClicksOnEditButton()
  And employee edits firstName                          # steps.EmployeeContactDetails.employeeEditsFirstName()
  And employee edits middleName                         # steps.EmployeeContactDetails.employeeEditsMiddleName()
  And employee edits lastName                           # steps.EmployeeContactDetails.employeeEditsLastName()
  And employee edits gender                             # steps.EmployeeContactDetails.employeeEditsGender()
  And employee edits nationality                        # steps.EmployeeContactDetails.employeeEditsNationality()
  And employee edits maritalStatus                      # steps.EmployeeContactDetails.employeeEditsMaritalStatus()
  And employee clicks on Save button                    # steps.EmployeeContactDetails.employeeClicksOnSaveButton()
The employee successfully updated personal information
  Then employees personal information should be saved   # steps.EmployeeContactDetails.employeesPersonalInformationShouldBeSaved()

    Embedding Update personal information [image/png 150127 bytes]

]]></system-out>
  </testcase>
  <testcase name="Display and add membership details" classname="Employee Membership Management" time="9.773">
    <system-out><![CDATA[
@membership
Scenario Outline: Display and add membership details                                                                                          # src/test/resources/features/employeeMembershipManagement.feature:24
  When the employee enters valid ess username and password                                                                                    # steps.EmployeeMembershipManagement.theEmployeeEntersValidEssUsernameAndPassword()
  And the employee clicks on login button                                                                                                     # steps.EmployeeMembershipManagement.theEmployeeClicksOnLoginButton()
The employee logged in
  Then the employee is successfully logged in the application                                                                                 # steps.EmployeeMembershipManagement.theEmployeeIsSuccessfullyLoggedInTheApplication()
  When the employee clicks on My Info tab                                                                                                     # steps.EmployeeMembershipManagement.theEmployeeClicksOnMyInfoTab()
  And the employee clicks Memberships option                                                                                                  # steps.EmployeeMembershipManagement.theEmployeeClicksMembershipsOption()
  And the employee clicks Add button                                                                                                          # steps.EmployeeMembershipManagement.theEmployeeClicksAddButton()
  And the employee enters "Spotify" and "Company" and "50" and "United States Dollar" and "2023-07-15" and "2024-07-15" in data driven format # steps.EmployeeMembershipManagement.theEmployeeEntersAndAndAndAndAndInDataDrivenFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
  And the employee clicks the save button                                                                                                     # steps.EmployeeMembershipManagement.theEmployeeClicksTheSaveButton()
Fields are filled in
  Then the system should validate that mandatory fields are filled in                                                                         # steps.EmployeeMembershipManagement.theSystemShouldValidateThatMandatoryFieldsAreFilledIn()
Details stored
  And the system should store the membership details in the employee's profile                                                                # steps.EmployeeMembershipManagement.theSystemShouldStoreTheMembershipDetailsInTheEmployeeSProfile()

    Embedding Display and add membership details [image/png 149649 bytes]

]]></system-out>
  </testcase>
  <testcase name="Edit previously saved membership details" classname="Employee Membership Management" time="9.862">
    <system-out><![CDATA[
@membership
Scenario Outline: Edit previously saved membership details                                                                                      # src/test/resources/features/employeeMembershipManagement.feature:35
  When the employee enters valid ess username and password                                                                                      # steps.EmployeeMembershipManagement.theEmployeeEntersValidEssUsernameAndPassword()
  And the employee clicks on login button                                                                                                       # steps.EmployeeMembershipManagement.theEmployeeClicksOnLoginButton()
The employee logged in
  Then the employee is successfully logged in the application                                                                                   # steps.EmployeeMembershipManagement.theEmployeeIsSuccessfullyLoggedInTheApplication()
  When the employee clicks on My Info tab                                                                                                       # steps.EmployeeMembershipManagement.theEmployeeClicksOnMyInfoTab()
  And the employee clicks Memberships option                                                                                                    # steps.EmployeeMembershipManagement.theEmployeeClicksMembershipsOption()
  Given the employee has previously saved membership details                                                                                    # steps.EmployeeMembershipManagement.theEmployeeHasPreviouslySavedMembershipDetails()
  When the employee clicks on specific membership account                                                                                       # steps.EmployeeMembershipManagement.theEmployeeClicksOnSpecificMembershipAccount()
  And the employee edits "Amazon" and "Individual" and "150" and "United States Dollar" and "2023-08-10" and "2024-08-10" in data driven format # steps.EmployeeMembershipManagement.theEmployeeEditsAndAndAndAndAndInDataDrivenFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
  And the employee clicks the save button                                                                                                       # steps.EmployeeMembershipManagement.theEmployeeClicksTheSaveButton()
  Then the system should update the employee's membership details                                                                               # steps.EmployeeMembershipManagement.theSystemShouldUpdateTheEmployeeSMembershipDetails()

    Embedding Edit previously saved membership details [image/png 149649 bytes]

]]></system-out>
  </testcase>
  <testcase name="Delete previously saved membership details" classname="Employee Membership Management" time="8.347">
    <system-out><![CDATA[
@membership
Scenario: Delete previously saved membership details          # src/test/resources/features/employeeMembershipManagement.feature:38
  When the employee enters valid ess username and password    # steps.EmployeeMembershipManagement.theEmployeeEntersValidEssUsernameAndPassword()
  And the employee clicks on login button                     # steps.EmployeeMembershipManagement.theEmployeeClicksOnLoginButton()
The employee logged in
  Then the employee is successfully logged in the application # steps.EmployeeMembershipManagement.theEmployeeIsSuccessfullyLoggedInTheApplication()
  When the employee clicks on My Info tab                     # steps.EmployeeMembershipManagement.theEmployeeClicksOnMyInfoTab()
  And the employee clicks Memberships option                  # steps.EmployeeMembershipManagement.theEmployeeClicksMembershipsOption()
  Given the employee has previously saved membership details  # steps.EmployeeMembershipManagement.theEmployeeHasPreviouslySavedMembershipDetails()
  When the employee clicks on checkbox                        # steps.EmployeeMembershipManagement.theEmployeeClicksOnCheckbox()
  And the employee clicks on Delete button                    # steps.EmployeeMembershipManagement.theEmployeeClicksOnDeleteButton()
Chosen membership account was successfully deleted
  Then given membership account has been deleted              # steps.EmployeeMembershipManagement.givenMembershipAccountHasBeenDeleted()

    Embedding Delete previously saved membership details [image/png 145970 bytes]

]]></system-out>
  </testcase>
  <testcase name="ess can change profile picture" classname="Ess changes profile picture" time="7.265">
    <system-out><![CDATA[
@picture
Scenario: ess can change profile picture                # src/test/resources/features/uploadProfilePicture.feature:7
  Given ess is navigated to HRMS application            # steps.uploadProfilePicture.essIsNavigatedToHRMSApplication()
  Given ess is on the My Info page                      # steps.uploadProfilePicture.essIsOnTheMyInfoPage()
  When ess clicks on the Change Photo button            # steps.uploadProfilePicture.essClicksOnTheChangePhotoButton()
  And ess selects a profile picture from their computer # steps.uploadProfilePicture.essSelectsAProfilePictureFromTheirComputer()
  And ess clicks on the Upload button                   # steps.uploadProfilePicture.essClicksOnTheUploadButton()
profile picture has been successfully changed
  Then ess's profile picture is updated                 # steps.uploadProfilePicture.essSProfilePictureIsUpdated()

    Embedding ess can change profile picture [image/png 140761 bytes]

]]></system-out>
  </testcase>
</testsuite>